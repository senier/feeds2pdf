#!/usr/bin/env python3

import argparse
import time
import urllib.request
import xml.etree.ElementTree as ET
from email.utils import parsedate
from pathlib import Path
from typing import List

import pandoc
from pandoc.types import (  # pylint: disable=no-name-in-module
    Attr,
    Block,
    Header,
    Link,
    Meta,
    Pandoc,
    Para,
    Space,
    Str,
)

parser = argparse.ArgumentParser(description="Create PDF from RSS feeds")
parser.add_argument(
    "-o", "--output", nargs=1, action="store", type=Path, required=True, help="output file"
)
parser.add_argument("urls", nargs="+", action="store", help="RSS URLs to convert")
args = parser.parse_args()

news = []

for url in args.urls:
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 "
        "(KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Encoding": "none",
        "Accept-Language": "en-US,en;q=0.8",
        "Connection": "keep-alive",
    }
    request = urllib.request.Request(url, headers=headers)
    with urllib.request.urlopen(request) as response:
        tree = ET.ElementTree(ET.fromstring(response.read()))
        for channel in tree.findall("./channel"):
            chan_title = channel.find("title")
            assert chan_title is not None
            for item in channel.findall("./item"):
                for child in item:
                    if child.tag == "title":
                        title = child.text
                    elif child.tag == "description":
                        description = child.text
                    elif child.tag == "link":
                        link = child.text
                    elif child.tag == "pubDate":
                        parsed_date = parsedate(child.text)
                        assert parsed_date is not None
                        date = time.mktime(parsed_date)
                    elif child.tag in (
                        "author",
                        "guid",
                        "enclosure",
                        "{http://purl.org/rss/1.0/modules/content/}encoded",
                        "category",
                    ):
                        pass
                    else:
                        print(f"Unknown: {child.tag} - {child.text}")
                news.append((date, chan_title.text, title, description, link))


NO_ATTR: Attr = ("", [], [])

content: List[Block] = [Header(1, ("top", [], []), [Str("News")])]

for index, (date, chan, title, desc, link) in enumerate(reversed(sorted(news, key=lambda e: e[0]))):
    assert title is not None
    date_str = time.strftime("%a, %Y-%m-%d %H:%M", time.localtime(date))
    content.append(Header(2, (f"{index}", [], []), [Str(title)]))
    content.append(
        Para(
            [
                Link(
                    NO_ATTR,
                    [Str(f"{chan},"), Space(), Str(f"{date_str}"), Space(), Str("[Top]")],
                    ("#top", ""),
                )
            ]
        )
    )
    if desc:
        content.append(Para([Str(desc)]))

doc = Pandoc(Meta({}), content)
pandoc.write(
    doc,
    file=args.output[0],
    format="pdf",
    options=["-V", "geometry:margin=5pt", "--pdf-engine=xelatex"],
)
